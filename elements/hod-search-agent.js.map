{"version":3,"file":"hod-search-agent.js","sourceRoot":"","sources":["../../src/elements/hod-search-agent.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAG3D,OAAO,0DAA0D,CAAC;AAElE,OAAO,yBAAyB,CAAC;AACjC,OAAO,iCAAiC,CAAC;AACzC,OAAO,sBAAsB,CAAC;AAG9B,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAErD;;;GAGG;AACH,MAAM,OAAgB,cAAe,SAAQ,UAAU;IAAvD;QACE,wBAAwB;;QAKxB,yBAAyB;QAEzB,oBAAe,GAAiB,EAAE,CAAC;QAEnC,wBAAmB,GAAuB,SAAS,CAAC;IA6EtD,CAAC;IAxEC,MAAM,KAAK,MAAM;QACf,OAAO;YACL,YAAY;YACZ,GAAG,CAAA;;;;OAIF;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,cAAsB;QACvC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;YAC5C,KAAK,EAAE,eAAe;YACtB,SAAS,EAAE,EAAE,cAAc,EAAE;SAC9B,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAElD,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,YAAY;QACV,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE;YACvD,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC;YAErC,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC;gBAAE,OAAO,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAEtD,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC;YAElC,IAAI,cAAc,KAAK,IAAI,CAAC,mBAAmB,EAAE;gBAC/C,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC;gBAC1C,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aACjD;YAED,MAAM,SAAS,GAAG,MAAM;iBACrB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;iBACpC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YAE3D,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,CAAc;QAC/B,MAAM,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;QAEhC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACrC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAC7C,CAAC;QAEF,kDAAkD;QAClD,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,gBAAgB,EAAE;gBAChC,MAAM,EAAE;oBACN,KAAK;iBACN;aACF,CAAC,CACH,CAAC;SACH;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;yBAKU,IAAI,CAAC,kBAAkB;;KAE3C,CAAC;IACJ,CAAC;CACF;AA1EC;IADC,KAAK,CAAC,YAAY,CAAC;iDACQ","sourcesContent":["import { LitElement, css, html, query } from 'lit-element';\nimport { ApolloClient } from '@apollo/client/core';\n\nimport '@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box';\nimport type { ComboBoxElement } from '@vaadin/vaadin-combo-box';\nimport '@material/mwc-textfield';\nimport '@material/mwc-circular-progress';\nimport '@material/mwc-button';\n\nimport { Agent } from '../types';\nimport { sharedStyles } from '../sharedStyles';\nimport { SEARCH_PROFILES } from '../graphql/queries';\n\n/**\n * @element hod-search-agent\n * @fires agent-selected - Fired when the user selects some agent. `event.detail.agent` will contain the agent selected\n */\nexport abstract class HodSearchAgent extends LitElement {\n  /** Public attributes */\n\n  /** Dependencies */\n  abstract get _apolloClient(): ApolloClient<any>;\n\n  /** Private properties */\n\n  _searchedAgents: Array<Agent> = [];\n\n  _lastSearchedPrefix: string | undefined = undefined;\n\n  @query('#combo-box')\n  _comboBox!: ComboBoxElement;\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n      `,\n    ];\n  }\n\n  async searchAgents(usernamePrefix: string): Promise<Array<Agent>> {\n    const result = await this._apolloClient.query({\n      query: SEARCH_PROFILES,\n      variables: { usernamePrefix },\n    });\n\n    this._searchedAgents = result.data.searchProfiles;\n\n    return this._searchedAgents;\n  }\n\n  firstUpdated() {\n    this._comboBox.dataProvider = async (params, callback) => {\n      const usernamePrefix = params.filter;\n\n      if (usernamePrefix.length < 3) return callback([], 0);\n\n      let agents = this._searchedAgents;\n\n      if (usernamePrefix !== this._lastSearchedPrefix) {\n        this._lastSearchedPrefix = usernamePrefix;\n        agents = await this.searchAgents(params.filter);\n      }\n\n      const usernames = agents\n        .map(agent => agent.profile.username)\n        .filter(username => username.startsWith(usernamePrefix));\n\n      callback(usernames, usernames.length);\n    };\n  }\n\n  onUsernameSelected(e: CustomEvent) {\n    const username = e.detail.value;\n\n    const agent = this._searchedAgents.find(\n      agent => agent.profile.username === username\n    );\n\n    // If username matches agent, user has selected it\n    if (agent) {\n      this.dispatchEvent(\n        new CustomEvent('agent-selected', {\n          detail: {\n            agent,\n          },\n        })\n      );\n    }\n  }\n\n  render() {\n    return html`\n      <vaadin-combo-box\n        label=\"Search agent\"\n        placeholder=\"At least 3 chars...\"\n        id=\"combo-box\"\n        @value-changed=${this.onUsernameSelected}\n      ></vaadin-combo-box>\n    `;\n  }\n}\n"]}