{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/graphql/resolvers.ts"],"names":[],"mappings":"AAIA,SAAS,YAAY,CAAC,IAAiB;IACrC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,YAA0B,EAC1B,MAAc,EACd,QAAQ,GAAG,UAAU;IAErB,SAAS,QAAQ,CAAC,OAAe,EAAE,OAAY;QAC7C,OAAO,YAAY,CAAC,QAAQ,CAAC;YAC3B,GAAG,EAAE,IAAW;YAChB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,QAAQ;YACnB,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,KAAK,EAAE;YACL,KAAK,CAAC,OAAO,CAAC,MAAM;gBAClB,IAAI,MAAM,CAAC,OAAO;oBAAE,OAAO,MAAM,CAAC,OAAO,CAAC;gBAE1C,OAAO,QAAQ,CAAC,mBAAmB,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;YAClD,CAAC;SACF;QACD,KAAK,EAAE;YACL,KAAK,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,cAAc,EAAE;gBACxC,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,iBAAiB,EAAE;oBAClD,eAAe,EAAE,cAAc;iBAChC,CAAC,CAAC;gBACH,OAAO,SAAS,CAAC,GAAG,CAClB,CAAC,KAAuD,EAAE,EAAE,CAAC,CAAC;oBAC5D,EAAE,EAAE,KAAK,CAAC,aAAa;oBACvB,OAAO,EAAE,KAAK,CAAC,OAAO;iBACvB,CAAC,CACH,CAAC;YACJ,CAAC;YACD,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;gBACZ,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBAEvD,IAAI,CAAC,OAAO,EAAE;oBACZ,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBACpD,OAAO,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC;iBAC3B;gBAED,OAAO;oBACL,EAAE,EAAE,OAAO,CAAC,aAAa;oBACzB,OAAO,EAAE,OAAO,CAAC,OAAO;iBACzB,CAAC;YACJ,CAAC;SACF;QACD,QAAQ,EAAE;YACR,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE;gBACjC,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,gBAAgB,EAAE;oBAC/C,QAAQ;iBACT,CAAC,CAAC;gBAEH,OAAO;oBACL,EAAE,EAAE,OAAO,CAAC,aAAa;oBACzB,OAAO,EAAE;wBACP,QAAQ;qBACT;iBACF,CAAC;YACJ,CAAC;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { AppWebsocket, CellId, AgentPubKey } from '@holochain/conductor-api';\nimport { Resolvers } from '@apollo/client/core';\nimport { Profile } from '../types';\n\nfunction hashToString(hash: AgentPubKey) {\n  return hash.hash_type.toString('hex') + hash.hash.toString('hex');\n}\n\nexport function profilesResolvers(\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  zomeName = 'profiles'\n): Resolvers {\n  function callZome(fn_name: string, payload: any) {\n    return appWebsocket.callZome({\n      cap: null as any,\n      cell_id: cellId,\n      zome_name: zomeName,\n      fn_name: fn_name,\n      payload: payload,\n      provenance: cellId[1],\n    });\n  }\n\n  return {\n    Agent: {\n      async profile(parent) {\n        if (parent.profile) return parent.profile;\n\n        return callZome('get_agent_profile', parent.id);\n      },\n    },\n    Query: {\n      async searchProfiles(_, { usernamePrefix }) {\n        const allAgents = await callZome('search_profiles', {\n          username_prefix: usernamePrefix,\n        });\n        return allAgents.map(\n          (agent: { agent_pub_key: AgentPubKey; profile: Profile }) => ({\n            id: agent.agent_pub_key,\n            profile: agent.profile,\n          })\n        );\n      },\n      async me(_, __) {\n        const profile = await callZome('get_my_profile', null);\n\n        if (!profile) {\n          const my_pub_key = await callZome('who_am_i', null);\n          return { id: my_pub_key };\n        }\n\n        return {\n          id: profile.agent_pub_key,\n          profile: profile.profile,\n        };\n      },\n    },\n    Mutation: {\n      async createProfile(_, { username }) {\n        const profile = await callZome('create_profile', {\n          username,\n        });\n\n        return {\n          id: profile.agent_pub_key,\n          profile: {\n            username,\n          },\n        };\n      },\n    },\n  };\n}\n"]}